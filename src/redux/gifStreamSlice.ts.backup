import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';
import {
    Gif,
    GifsApi,
    Configuration
} from '../generated/giphy';

export type GifStreamState = { gifs: Gif[], page_requested: number, page_loaded: number };

const PAGE_SIZE = 25;

const api = new GifsApi(
    new Configuration({ apiKey: 'a3ZRVRY96IYxu1tJD5hkDDFE9Pac4Vih' })
);

export const moarGifs = createAsyncThunk('moarGifs',
    (page: number, thunkApi) =>
        api.trendingGifs({ offset: Math.floor(page/PAGE_SIZE)*PAGE_SIZE, limit: PAGE_SIZE }).then(r =>
            ({ gifs: r.data || [], page: ((r.pagination?.offset || 0) + (r.pagination?.count || 0)) })),
    {
        condition: (page: number, { getState, extra }: { getState: () => GifStreamState, extra: any }) =>{
            const state = getState();
            console.log(`moarGifs/condition(${page}) [page_requested:${state.page_requested}, page_loaded:${state.page_loaded}]`);
            if(state.page_requested > 20) return false;
            if(state.page_requested) return page > state.page_requested
            return true;
        }
    });

export default createSlice({
    name: 'gifStream',
    initialState: { gifs: [], page_requested: 0, page_loaded: 0 },
    reducers: {},
    extraReducers: builder =>
        builder.addCase(moarGifs.fulfilled, (state: GifStreamState, action) => {
            console.log(`moarGifs/fulfilled(${action.payload.page}) [page_requested:${state.page_requested}, page_loaded:${state.page_loaded}]`);
            if (action.payload.page > (state.page_loaded || 0)) {
                state.gifs = state.gifs.concat(action.payload.gifs);
                state.page_loaded = action.payload.page;
            }
        }).addCase(moarGifs.pending, (state, action) => {
            console.log(`moarGifs/pending(${action.meta.arg}) [page_requested:${state.page_requested}, page_loaded:${state.page_loaded}]`);
            state.page_requested = action.meta.arg;
        })
}).reducer;
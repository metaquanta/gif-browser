/* tslint:disable */
/* eslint-disable */
/**
 * Giphy
 * Giphy API
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@giphy.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    InlineResponse200,
    InlineResponse200FromJSON,
    InlineResponse200ToJSON,
    InlineResponse2001,
    InlineResponse2001FromJSON,
    InlineResponse2001ToJSON,
} from '../models';

export interface RandomStickerRequest {
    tag?: string;
    rating?: string;
}

export interface SearchStickersRequest {
    q: string;
    limit?: number;
    offset?: number;
    rating?: string;
    lang?: string;
}

export interface TranslateStickerRequest {
    s: string;
}

export interface TrendingStickersRequest {
    limit?: number;
    offset?: number;
    rating?: string;
}

/**
 * 
 */
export class StickersApi extends runtime.BaseAPI {

    /**
     * Returns a random GIF, limited by tag. Excluding the tag parameter will return a random GIF from the GIPHY catalog. 
     * Random Sticker
     */
    async randomStickerRaw(requestParameters: RandomStickerRequest): Promise<runtime.ApiResponse<InlineResponse2001>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.tag !== undefined) {
            queryParameters['tag'] = requestParameters.tag;
        }

        if (requestParameters.rating !== undefined) {
            queryParameters['rating'] = requestParameters.rating;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_key"] = this.configuration.apiKey("api_key"); // api_key authentication
        }

        const response = await this.request({
            path: `/stickers/random`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2001FromJSON(jsonValue));
    }

    /**
     * Returns a random GIF, limited by tag. Excluding the tag parameter will return a random GIF from the GIPHY catalog. 
     * Random Sticker
     */
    async randomSticker(requestParameters: RandomStickerRequest): Promise<InlineResponse2001> {
        const response = await this.randomStickerRaw(requestParameters);
        return await response.value();
    }

    /**
     * Replicates the functionality and requirements of the classic GIPHY search, but returns animated stickers rather than GIFs. 
     * Search Stickers
     */
    async searchStickersRaw(requestParameters: SearchStickersRequest): Promise<runtime.ApiResponse<InlineResponse200>> {
        if (requestParameters.q === null || requestParameters.q === undefined) {
            throw new runtime.RequiredError('q','Required parameter requestParameters.q was null or undefined when calling searchStickers.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.q !== undefined) {
            queryParameters['q'] = requestParameters.q;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.rating !== undefined) {
            queryParameters['rating'] = requestParameters.rating;
        }

        if (requestParameters.lang !== undefined) {
            queryParameters['lang'] = requestParameters.lang;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_key"] = this.configuration.apiKey("api_key"); // api_key authentication
        }

        const response = await this.request({
            path: `/stickers/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse200FromJSON(jsonValue));
    }

    /**
     * Replicates the functionality and requirements of the classic GIPHY search, but returns animated stickers rather than GIFs. 
     * Search Stickers
     */
    async searchStickers(requestParameters: SearchStickersRequest): Promise<InlineResponse200> {
        const response = await this.searchStickersRaw(requestParameters);
        return await response.value();
    }

    /**
     * The translate API draws on search, but uses the GIPHY `special sauce` to handle translating from one vocabulary to another. In this case, words and phrases to GIFs. 
     * Translate phrase to Sticker
     */
    async translateStickerRaw(requestParameters: TranslateStickerRequest): Promise<runtime.ApiResponse<InlineResponse2001>> {
        if (requestParameters.s === null || requestParameters.s === undefined) {
            throw new runtime.RequiredError('s','Required parameter requestParameters.s was null or undefined when calling translateSticker.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.s !== undefined) {
            queryParameters['s'] = requestParameters.s;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_key"] = this.configuration.apiKey("api_key"); // api_key authentication
        }

        const response = await this.request({
            path: `/stickers/translate`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2001FromJSON(jsonValue));
    }

    /**
     * The translate API draws on search, but uses the GIPHY `special sauce` to handle translating from one vocabulary to another. In this case, words and phrases to GIFs. 
     * Translate phrase to Sticker
     */
    async translateSticker(requestParameters: TranslateStickerRequest): Promise<InlineResponse2001> {
        const response = await this.translateStickerRaw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch Stickers currently trending online. Hand curated by the GIPHY editorial team. Returns 25 results by default. 
     * Trending Stickers
     */
    async trendingStickersRaw(requestParameters: TrendingStickersRequest): Promise<runtime.ApiResponse<InlineResponse200>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.rating !== undefined) {
            queryParameters['rating'] = requestParameters.rating;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_key"] = this.configuration.apiKey("api_key"); // api_key authentication
        }

        const response = await this.request({
            path: `/stickers/trending`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse200FromJSON(jsonValue));
    }

    /**
     * Fetch Stickers currently trending online. Hand curated by the GIPHY editorial team. Returns 25 results by default. 
     * Trending Stickers
     */
    async trendingStickers(requestParameters: TrendingStickersRequest): Promise<InlineResponse200> {
        const response = await this.trendingStickersRaw(requestParameters);
        return await response.value();
    }

}
